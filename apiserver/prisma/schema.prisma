// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(uuid())
  firstName          String?
  lastName           String?
  username           String      @unique
  password           String
  email              String      @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now()) @updatedAt
  SubRedditsCreated  SubReddit[] @relation("CreatedBySubreddits")
  SubRedditsFollowed SubReddit[] @relation("FollwedBySubreddits")
  authoredPosts      Post[]      @relation("AuthoredPosts")
  votes              Vote[]
}

model SubReddit {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String
  bannerImageUrl String?
  iconImageUrl   String?
  followedBy     User[]   @relation("FollwedBySubreddits")
  Post           Post[]
  membersCount   Int      @default(0)
  createdBy      User     @relation("CreatedBySubreddits", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

model Post {
  id            String    @id @default(uuid())
  title         String
  description   String
  imagesUrl     String[]
  videosUrl     String[]
  author        User      @relation("AuthoredPosts", fields: [authorId], references: [id])
  authorId      String
  subreddit     SubReddit @relation(fields: [subredditId], references: [id])
  subredditId   String
  votes         Vote[]
  upvoteCount   Int       @default(0)
  downvoteCount Int       @default(0)
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Vote {
  userId   String
  postId   String
  user     User     @relation(fields: [userId], references: [id])
  post     Post     @relation(fields: [postId], references: [id])
  voteType VoteType

  @@id([userId, postId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
